<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		
	</head>
	
	<body>
		<table>
			<tr>
				<td><p>這是一個模擬Hash Table的程式</p></td>
			</tr>
			<tr>
				<td><p>你需先按下，模擬模式，或是測驗模式，接著，你需再按下建Hash Table時Collision要用linear probe或是double hash</p></td>
			</tr>
			
			<tr>
				<td><p>1.在模擬模式下，你可以自行輸入要放入Hash Table的資料，或是按下隨機產生，然後可以按下一步(一次做一步)，一次做完，全部清除(需再從上面重新設定)</p></td>
			</tr>
			
			<tr>
				<td><p>2.在測驗模式下，請先設定好解決Collision的方法，按下開始出題，根據隨機產生的資料，按照建Hash Table的方式，將答案填入格子中，之後按下確認答案。錯的格子將會以黃色背景顯示。</p></td>
			</tr>
			
		</table>
		<hr>
		<hr>
		<form name = "hashForm" id="hashForm" >
			<table>
			<tr>
				<td><p>1.設定模式:</p></td>  <td><input type="radio" name="modeChoice1" value="模擬模式">模擬模式</td>  <td><input type="radio" name="modeChoice1" value="測驗模式">測驗模式   </td><td><input type = "button"  value = "確認" onClick = "modeChoice();"></td>
				<td><input type = "button"  value = "清除" onClick = "modeClear();"></td><td><p id="mode"></p></td>
			</tr>
			<tr>
				<td><p>2.設定:Collision解決方式</p></td>  <td><input type="radio" name="collision1" value="linear probe">linear probe</td>  <td><input type="radio" name="collision1" value="double hash">double hash   </td><td><input type = "button"  value = "確認" onClick = "collisionChoice();"></td>
				<td><input type = "button"  value = "清除" onClick = "collisionClear();"></td><td><p id="collision"></p></td>
			</tr>
			</table>
			<table>
				<tr>
					<td>請輸入資料：</td> <td><input type=text value="" id=dataText size="30"></td>
					<td><input type = "button"  value = "確定" onClick = "fillData()"></td>
					<td><input type = "button"  value = "隨機產生" onClick = "fillData1()"></td>
					<td><input type = "button"  value = "清除資料" onClick = "deleteData()"></td>
				</tr>
			</table>
			<table>
				<tr>	
					<td><p id="data"></p></td>
				</tr>
			</table>
			<table>
				<tr>	
					<td><p>Hash Table:</p></td>
				</tr>
			</table>
			<table>
				<tr>	
					<td><input type=text value="" id=1 size="5"></td>
					<td><input type=text value="" id=2 size="5"></td>
					<td><input type=text value="" id=3 size="5"></td>
					<td><input type=text value="" id=4 size="5"></td>
					<td><input type=text value="" id=5 size="5"></td>
					<td><input type=text value="" id=6 size="5"></td>
					<td><input type=text value="" id=7 size="5"></td>
					<td><input type=text value="" id=8 size="5"></td>
					<td><input type=text value="" id=9 size="5"></td>
					<td><input type=text value="" id=10 size="5"></td>
					<td><input type=text value="" id=11 size="5"></td>
					<td><input type=text value="" id=12 size="5"></td>
					<td><input type=text value="" id=13 size="5"></td>
				</tr>
			</table>
			<table>
				<tr>	
					<td><textarea name="Content" style="width:700px;height:200px;" id=hashTableArea readonly="readonly"></textarea></td>
				</tr>
			</table>
			<table>
				<tr>
					<td><p>模擬模式用的按鈕：</p></td>	
					<td><input type = "button"  value = "下一步" onClick = "next()"></td>
					<td><input type = "button"  value = "ㄧ次做完" onClick = "doAll()"></td>
					<td><input type = "button"  value = "全部清除" onClick = "clearAll()"></td>
					
				</tr>
				<tr>
					<td><p>測驗模式用的按鈕：</p></td>
					<td><input type = "button"  value = "開始出題" onClick = "giveQuestion()"></td>
					<td><input type = "button"  value = "確認答案" onClick = "checkAnswer()"></td>
					<td><input type = "button"  value = "全部清除" onClick = "clearAll1()"></td>
				</tr>
			</table>

		</form>
		
		<script>
			var mode = -1;
			var collision = -1;
			var hashStep = 0;
			var innerLocation1 = 0;// nest step use.
			var data = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
			var hashData = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
			var hashDataCheck = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
			var spitData = new Array();
			var fillLocation = 0;
			var hashLocation = 0;
			var linearString1 = "\n現在將 ";
			var linearString2 = "除以13所得的餘數為 ";
			var linearString3 = " 這個位置是否已經有人呢?";
			var linearString4 = "\n沒人，所以 ";
			var linearString5 = "放在位置";
			var linearString6 = "\n有人，須往下探測一個位置";
			var linearString7 = "\n資料全部放入了hash Table 用linear probe的方式解決Collision";
			var linearString = "";
			var putDataCount = 1;
			var hashAmount = 0;

			function modeChoice(){
				var form = document.getElementById("hashForm");
				var result = document.getElementById("mode");
			
				for (var i = 0; i < form.modeChoice1.length; i++) {
					if ( form.modeChoice1[i].checked ) {
						result.innerHTML = "you selected " + form.modeChoice1[i].value;
						mode = i;
						break;
					}
				}
			}
			
			function collisionChoice(){
				var form = document.getElementById("hashForm");
				var result = document.getElementById("collision");
			
				for (var i = 0; i < form.collision1.length; i++) {
					if ( form.collision1[i].checked ) {
						collision = i;
						result.innerHTML = "you selected " + form.collision1[i].value;
						break;
					}
				}
			}
			
			function modeClear(){
				var form = document.getElementById("hashForm");
				var result = document.getElementById("mode");
				for (var i = 0; i < form.modeChoice1.length; i++) {
					form.modeChoice1[i].checked = false;
				}
				result.innerHTML = "";
				mode = -1;
			}
			
			function collisionClear(){
				var form = document.getElementById("hashForm");
				var result = document.getElementById("collision");
				for (var i = 0; i < form.collision1.length; i++) {
					form.collision1[i].checked = false;
				}
				result.innerHTML = "";
				collision = -1;
			}
			
			function fillData1(){
				var result = document.getElementById("data");
				var dataString = "";
				if(mode != -1 && collision != -1){
					var amount = 12;
					var count = 0;
					while(fillLocation <= amount){
						var n1 = Math.floor(Math.random()*1000);
						data[fillLocation] = n1;

						fillLocation = fillLocation + 1;
					}
					var display = 0;
					var dataString1 = "";
					while(display < data.length){
						if(data[display] != -1){
							hashDataCheck[display] = 1;
							dataString1 = dataString1 + data[display] + ",";
							display = display + 1;
						}else{
							break;
						}						
					}
					result.innerHTML =  "資料為" + dataString1;	
					document.getElementById("dataText").value = "";	
					fillLocation = 13;
				}else{
					result.innerHTML = "你沒有選擇模式或是Collision解決方式";
				}
			}
			
			function fillData(){
				var dataString = document.getElementById("dataText").value;
				var result = document.getElementById("data");
				spitData = dataString.split(",");
				var amount = spitData.length;
				var innerLocation = 0;
				if(mode != -1 && collision != -1){
					if(fillLocation < 13){
						while(amount > 0){
							data[fillLocation] = spitData[innerLocation];

							innerLocation = innerLocation + 1;
							fillLocation = fillLocation + 1;
							amount = amount - 1;
							if(fillLocation >= 13){
								break;
							}
						}
						var display = 0;
						var dataString1 = "";
						while(display < data.length){
							if(data[display] != -1){
								hashDataCheck[display] = 1;
								dataString1 = dataString1 + data[display] + ",";
								display = display + 1;
							}else{
								break;
							}						
						}
						result.innerHTML =  "資料為" + dataString1;	
						document.getElementById("dataText").value = "";
					}else{
						var display = 0;
						var dataString1 = "";
						while(display < data.length){
							if(data[display] != -1){

								dataString1 = dataString1 + data[display] + ",";
								display = display + 1;
							}else{
								break;
							}						
						}
						result.innerHTML =  "資料為" + dataString1 + "資料超過容納的量，不可再加入";	
						document.getElementById("dataText").value = "";
					}
				}else{
					result.innerHTML = "你沒有選擇模式或是Collision解決方式";
				}
			}
			
			function deleteData(){
				var result = document.getElementById("data");
				document.getElementById("dataText").value = "";
				var amount = 12;
				var count = 0;
				while(count <= amount){
					data[count] = -1;
					count = count + 1;
					hashDataCheck[count] = -1;
					hashData[count] = -1;
				}
				result.innerHTML = "";
				fillLocation = 0;
			}

			function next(){
				calculateHashAmount();
				if(mode == 0 && collision != -1){
					if(collision == 0 && hashDataCheck[hashLocation] != -1 && putDataCount <= hashAmount){
						
						if(hashStep == 0){
							innerLocation1 = data[hashLocation] % 13;
							linearString = linearString + linearString1 + data[hashLocation] + linearString2 + innerLocation1;
							document.getElementById("hashTableArea").innerHTML = linearString;
							hashStep = 1;
						}else if(hashStep == 1){

							linearString = linearString + "\n" + innerLocation1 + linearString3;
							document.getElementById("hashTableArea").innerHTML = linearString;
							colorWhite();
							if(innerLocation1 == 0){
								
								document.getElementById("1").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 1){
								
								document.getElementById("2").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 2){
								
								document.getElementById("3").style.backgroundColor = "#f63";	
							}else if(innerLocation1 == 3){
								
								document.getElementById("4").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 4){
								
								document.getElementById("5").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 5){
								
								document.getElementById("6").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 6){
								
								document.getElementById("7").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 7){
								
								document.getElementById("8").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 8){
								
								document.getElementById("9").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 9){
								
								document.getElementById("10").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 10){
								
								document.getElementById("11").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 11){
								
								document.getElementById("12").style.backgroundColor = "#f63";
							}else if(innerLocation1 == 12){
								
								document.getElementById("13").style.backgroundColor = "#f63";
							}else{ 
							}
							if(hashData[innerLocation1] == -1){
								hashStep = 2;
							}else{
								hashStep = 3;
							}
						}else if(hashStep == 2){
							colorWhite();
							linearString = linearString + linearString4 + data[hashLocation] + linearString5 + innerLocation1;
							document.getElementById("hashTableArea").innerHTML = linearString;
							if(innerLocation1 == 0){
								document.getElementById("1").value = data[hashLocation];
								document.getElementById("1").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 1){
								document.getElementById("2").value = data[hashLocation];
								document.getElementById("2").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 2){
								document.getElementById("3").value = data[hashLocation];
								document.getElementById("3").style.backgroundColor = "#ff6";	
							}else if(innerLocation1 == 3){
								document.getElementById("4").value = data[hashLocation];
								document.getElementById("4").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 4){
								document.getElementById("5").value = data[hashLocation];
								document.getElementById("5").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 5){
								document.getElementById("6").value = data[hashLocation];
								document.getElementById("6").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 6){
								document.getElementById("7").value = data[hashLocation];
								document.getElementById("7").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 7){
								document.getElementById("8").value = data[hashLocation];
								document.getElementById("8").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 8){
								document.getElementById("9").value = data[hashLocation];
								document.getElementById("9").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 9){
								document.getElementById("10").value = data[hashLocation];
								document.getElementById("10").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 10){
								document.getElementById("11").value = data[hashLocation];
								document.getElementById("11").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 11){
								document.getElementById("12").value = data[hashLocation];
								document.getElementById("12").style.backgroundColor = "#ff6";
							}else if(innerLocation1 == 12){
								document.getElementById("13").value = data[hashLocation];
								document.getElementById("13").style.backgroundColor = "#ff6";
							}else{ 
							}
							
							hashStep = 0;
							hashData[innerLocation1] = data[hashLocation];
							hashLocation = hashLocation + 1;
							innerLocation1 = 0;
							putDataCount = putDataCount + 1;
						}else if(hashStep == 3){
							linearString = linearString + linearString6;
							document.getElementById("hashTableArea").innerHTML = linearString;
							if(innerLocation1 < 12){
								innerLocation1 = innerLocation1 + 1;
								hashStep = 1;
							}else if(innerLocation1 == 12){
								innerLocation1 = 0;
								hashStep = 1;
							}
						}else if(hashStep == 4){
							linearString = linearString + linearString7;
						}else{

						}
					}
				}
			}

			function clearAll(){
				document.getElementById("1").value = "";
				document.getElementById("2").value = "";
				document.getElementById("3").value = "";
				document.getElementById("4").value = "";
				document.getElementById("5").value = "";
				document.getElementById("6").value = "";
				document.getElementById("7").value = "";
				document.getElementById("8").value = "";
				document.getElementById("9").value = "";
				document.getElementById("10").value = "";
				document.getElementById("11").value = "";
				document.getElementById("12").value = "";
				document.getElementById("13").value = "";
				deleteData();
				modeClear();
				collisionClear();
				innerLocation1 = 0;
				hashStep = 0;
				linearString = "";
				document.getElementById("hashTableArea").innerHTML = "";
				putDataCount = 1;
				hashAmount = 0;
				fillLocation = 0;
				hashLocation = 0;
				data = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
				hashData = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
				hashDataCheck = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
				colorWhite();
			}

			function calculateHashAmount(){
				var count = 0;
				while(hashDataCheck[count] != -1 && count <=12){
					count = count + 1;
				}
				hashAmount = count;
			}

			function colorWhite(){
				document.getElementById("1").style.backgroundColor = "#fff";
				document.getElementById("2").style.backgroundColor = "#fff";
				document.getElementById("3").style.backgroundColor = "#fff";
				document.getElementById("4").style.backgroundColor = "#fff";
				document.getElementById("5").style.backgroundColor = "#fff";
				document.getElementById("6").style.backgroundColor = "#fff";
				document.getElementById("7").style.backgroundColor = "#fff";
				document.getElementById("8").style.backgroundColor = "#fff";
				document.getElementById("9").style.backgroundColor = "#fff";
				document.getElementById("10").style.backgroundColor = "#fff";
				document.getElementById("11").style.backgroundColor = "#fff";
				document.getElementById("12").style.backgroundColor = "#fff";
				document.getElementById("13").style.backgroundColor = "#fff";
			}
			
		</script>

	</body>
	
</html>
